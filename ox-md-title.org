:PROPERTIES:
:ID:       0EB3C746-C15C-498D-A759-B654CEBE9598
:END:
#+title: ox-md-title: Document titles for ox-md.el
#+author: Jeff Kreeftmeijer
#+date: 2023-04-24
#+options: toc:nil

Ox-md-title.el adds document titles to Markdown files generated with ox-md and derivatives.

* Introduction

Org documents often have their document titles set in a src_org[:exports code]{+#title} export setting at the start of the file.
The title is used when exporting to other formats.
For example, when exporting to HTML, the title is used in the resulting document's src_html[:exports code]{<title>} and src_html[:exports code]{<h1>} tags.

Markdown doesn't have an equivalent to Org's titles.
Instead, it's common to add a top-level headline to the start of the document.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/lisp/ox-md.el][Ox-md]], the Markdown exporter shipped with Org mode, adheres to Markdown's lack of explicit titles.[fn:patch]
Even though Org documents can have titles through the title export setting, ox-md produces Markdown files with the titles omitted.
For example, the current document has export settings, including a title:

#+include: "ox-md-title.org" src org :lines "4-13"

Exporting with src_emacs-lisp[:exports code]{org-md-export-as-markdown} produces a Markdown document without a title headline:

#+headers: :exports results
#+headers: :wrap src markdown
#+headers: :cache yes
#+begin_src emacs-lisp
  (find-file "ox-md-title.org")
  (org-md-export-as-markdown)

  (let ((contents (buffer-substring 1 163)))
    (kill-buffer)
    contents)
#+end_src

#+RESULTS[895dc372a4698a04047a1d2c27329f3c7e98078d]:
#+begin_src markdown
[Ox-md-title.el](https://github.com/jeffkreeftmeijer/ox-md-title.el) adds document titles to Markdown files generated with ox-md and derivatives.


# Introduction
#+end_src

Ox-md-title deviates from the Markdown standard and adds document titles to behave like the other org exporters.
Once enabled, it adds the document title in front of the exported document, and shifts the sub headlines one level down:

#+headers: :exports results
#+headers: :wrap src markdown
#+headers: :cache yes
#+begin_src emacs-lisp
  (require 'ox-md-title)
  (org-md-title-add)

  (find-file "ox-md-title.org")

  (let ((org-md-title t))
    (org-md-export-as-markdown))

  (let ((contents (buffer-substring 1 210)))
    (kill-buffer)
    contents)
#+end_src

#+RESULTS[aafde1d92af9a0c874e5e96444bc7817d50d061a]:
#+begin_src markdown

# ox-md-title: Document titles for ox-md.el

[Ox-md-title.el](https://github.com/jeffkreeftmeijer/ox-md-title.el) adds document titles to Markdown files generated with ox-md and derivatives.


## Introduction
#+end_src

* Implementation

The package works by advising two functions.
First, it advises src_emacs-lisp[:exports code]{org-md-template} by prepending the document title if src_emacs-lisp[:exports code]{org-export-with-title} is non-nil.
The title is built by calling out to src_emacs-lisp[:exports code]{org-md--headline-title} with the headline style and title extracted from the src_emacs-lisp[:exports code]{info} variable:

#+name: template
#+begin_src emacs-lisp
  (defgroup org-export-md-title nil
    "Options for org-md-title."
    :tag "Org Markdown Title"
    :group 'org-export
    :version "24.4"
    :package-version '(Org . "8.0"))

  (defun org-md-title--advise-template (orig-fun &rest args)
    (let ((info (nth 1 args))
          (orig-result (apply orig-fun args)))
      (if (plist-get info :with-title)
          (let ((style (plist-get info :md-headline-style))
                (title (plist-get info :title))
                (subtitle (plist-get info :subtitle)))
            (concat
             (when title
               (org-md--headline-title style 0 (org-export-data title info) nil))
             (when subtitle
               (org-md--headline-title style 1 (org-export-data subtitle info) nil))
             orig-result))
        orig-result)))
#+end_src

Because a new title is prepended to the document, any already-existing headlines need their levels bumped up.
The second advice intercepts calls to src_emacs-lisp[:exports code]{org-md--headline-title}, which is the internal function the Markdown exporter uses to generate headlines in the selected headline style.

Whenever that function is called, the advise kicks in and increments the second argument with 1[fn:h2]:
This means that whenever the src_emacs-lisp[:exports code]{org-md--headline-title} is called with a headline level of 1, it actually receives a 2.
The previously defined advise in src_emacs-lisp[:exports code]{org-md-title--advise-template} already accounts for that by using 0 and 1, instead of 1 and 2, for its title and subtitle levels.

[fn:h2] When the document has a title set, it's used as the document's top level, and other headlines are pushed down one level:

#+begin_src markdown
  # Title
  ## Headline 1
  ### Headline 2
#+end_src

If the document does not have a title, but ~org-md-title~'s advice is added, the headlines are still pushed down:

#+begin_src markdown
  ## Headline 1
  ### Headline 2
#+end_src

Bumping all headline levels up gives the same behavior as in Org's HTML exporter, which uses a src_html[:exports code]{<h1>} tag for the title, and a src_html[:exports code]{<h2>} tag for the top level headline, even if the source document does not have a title set.


#+name: headline
#+begin_src emacs-lisp
  (defun org-md-title--advise-headline-title (args)
    (setf (nth 1 args) (+ (nth 1 args) 1))
    args)
#+end_src

Finally, the added functions are added as advice:

#+name: advice
#+begin_src emacs-lisp
  (defun org-md-title-add ()
    (advice-add 'org-md--headline-title :filter-args #'org-md-title--advise-headline-title)
    (advice-add 'org-md-template :around #'org-md-title--advise-template))

  (defun org-md-title-remove ()
    (advice-remove 'org-md--headline-title #'org-md-title--advise-headline-title)
    (advice-remove 'org-md-template #'org-md-title--advise-template))
#+end_src

#+headers: :tangle ox-md-title.el
#+headers: :noweb yes
#+headers: :exports none
#+begin_src emacs-lisp
  ;;; ox-md-title.el --- Document titles for ox-md.el

  ;; Author: Jeff Kreeftmeijer <jeff@kreeft.me>
  ;; Version: 0.2.0
  ;; URL: https://jeffkreeftmeijer.com/ox-md-title

  ;;; Commentary:

  ;; ox-md-title.el adds document titles to markdown files generated
  ;; with ox-md and derivatives.

  ;;; Code:

  (require 'ox-md)

  <<template>>

  <<headline>>

  <<advice>>

  (provide 'ox-md-title)

  ;;; ox-md-title.el ends here
#+end_src

* Installation and usage

Ox-md-title is currently not available through any of the package registries.
Instead, install it from the repository direcly.
Install the package with [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/radian-software/straight.el][straight.el]], and enable it by calling src_emacs-lisp[:exports code]{org-md-title-add}:

#+begin_src emacs-lisp
  (use-package ox-md-title
    :straight
    (ox-md-title :type git :host codeberg :repo "jkreeftmeijer/ox-md-title.el")
    :config
    (org-md-title-add))
#+end_src

Alternatively, download =ox-md-title.el= and require it manually:

#+begin_src emacs-lisp
  (require 'ox-md-title)
  (org-md-title-add)
#+end_src

After calling src_emacs-lisp[:exports code]{org-md-title-add}, set the src_emacs-lisp[:exports code]{org-md-title} variable to add document titles when exporting with ox-md:

#+begin_src emacs-lisp
  (let ((org-md-title t))
    (org-markdown-export-to-markdown))
#+end_src

[fn:patch] A [[https://lists.gnu.org/archive/html/emacs-orgmode/2017-08/msg00553.html][patch to add titles]] was rejected to keep ox-md compatible with standard Markdown.
Instead of adding support for titles in the main implementation, it's suggested that features like this should be implemented in more specific backends:

#+begin_quote
The point of "md" export back-end is not to provide the same features as full-fledged ones like "latex" or "html".
I wrote it to take care of the boring stuff of markdown syntax.
Anyone willing to write a back-end with a different Markdown flavour just needs to concentrate of the differences between the original syntax.
#+end_quote

* Contributing

The git repository for ox-md-title.el is hosted on [[https://github.com/jeffkreeftmeijer/ox-md-title.el][GitHub]] and [[https://codeberg.org/jkreeftmeijer/ox-md-title.el][Codeberg]].
Contributions are welcome via either platform.

** Set up git remotes                                              :noexport:

Since ox-md-title.el is mirrored to GitHub, it uses multiple push remotes.
Commits pushed to the main branch should be mirrored.
A script is included in =scripts/remotes= to automate setting up these remotes after pulling:

#+headers: :shebang #!/bin/sh
#+headers: :tangle scripts/remotes
#+headers: :eval no
#+begin_src shell
  for remote in \
    "git@codeberg.org:jkreeftmeijer/ox-md-title.el.git" \
    "git@github.com:jeffkreeftmeijer/ox-md-title.el.git"
  do
    git remote set-url --delete --push origin $remote 2> /dev/null
    git remote set-url --add --push origin $remote
  done

  git remote show origin
#+end_src

To set up the git remotes, run the script:

#+headers: :exports both
#+headers: :results scalar
#+begin_src shell
  ./scripts/remotes
#+end_src

#+RESULTS:
: * remote origin
:   Fetch URL: https://codeberg.org/jkreeftmeijer/ox-md-title.el.git
:   Push  URL: https://codeberg.org/jkreeftmeijer/ox-md-title.el.git
:   Push  URL: https://github.com/jeffkreeftmeijer/ox-md-title.el.git
:   HEAD branch: main
:   Remote branch:
:     main new (next fetch will store in remotes/origin)
:   Local ref configured for 'git push':
:     main pushes to main (fast-forwardable)

** Generate README                                                 :noexport:

The =README.md= file is generated from =ox-md-title.org= with an included script named =scripts/readme=:

#+headers: :shebang #!/bin/sh
#+headers: :tangle scripts/readme
#+headers: :eval no
#+begin_src shell
  emacs --batch ox-md-title.org --load scripts/readme.el/readme.el --eval "(readme/to-markdown \"README.md\")"
#+end_src

To generate the README, run the script:

#+headers: :exports both
#+headers: :results scalar
#+begin_src shell
  ./scripts/readme
#+end_src

#+RESULTS:

** Tests

Regression tests are written with [[https://www.gnu.org/software/emacs/manual/html_mono/ert.html][ERT]] and included in =test.el=.
To run the tests in batch mode:

#+begin_src shell
  emacs -batch -l ert -l test.el -f ert-run-tests-batch-and-exit
#+end_src

#+RESULTS:
